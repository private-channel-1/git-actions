name: Integration Tests with Behave

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - user_management
        - api_integration
        - smoke

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create test reports directory
      run: mkdir -p test-reports

    - name: Set TEST_SUITE environment variable
      run: echo "TEST_SUITE=${{ github.event.inputs.test_suite || 'all' }}" >> $GITHUB_ENV

    - name: Run selected tests
      run: |
        echo "Running test suite: $TEST_SUITE"

        if [[ "$TEST_SUITE" == "smoke" ]]; then
          behave --tags=@smoke --format=pretty --outfile=test-reports/smoke-tests.txt
          behave --tags=@smoke --format=junit --outfile=test-reports/smoke-tests.xml

        elif [[ "$TEST_SUITE" == "user_management" ]]; then
          behave features/user_management.feature --format=pretty --outfile=test-reports/user-management-tests.txt
          behave features/user_management.feature --format=junit --outfile=test-reports/user-management-tests.xml

        elif [[ "$TEST_SUITE" == "api_integration" ]]; then
          behave features/api_integration.feature --format=pretty --outfile=test-reports/api-integration-tests.txt
          behave features/api_integration.feature --format=junit --outfile=test-reports/api-integration-tests.xml

        else
          behave --format=pretty --outfile=test-reports/all-tests.txt
          behave --format=junit --outfile=test-reports/all-tests.xml
          behave --format=html --outfile=test-reports/behave-report.html
        fi
      continue-on-error: true

    - name: List test report files
      if: always()
      run: |
        echo "Test report files generated:"
        ls -la test-reports/ || echo "No test-reports directory found"
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          test-reports/
          *.log
        retention-days: 30
        
    - name: Comment PR with test results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');

          let testSummary = '## Integration Test Results\n\n';
          
          try {
            if (fs.existsSync('test-reports')) {
              const testFiles = fs.readdirSync('test-reports');
              for (const file of testFiles) {
                if (file.endsWith('.txt')) {
                  const content = fs.readFileSync(path.join('test-reports', file), 'utf8');
                  testSummary += `### ${file}\n\`\`\`\n${content.substring(0, 1000)}...\n\`\`\`\n\n`;
                }
              }
            } else {
              testSummary += 'No test reports directory found.\n';
            }
          } catch (error) {
            testSummary += `Error reading test reports: ${error.message}\n`;
          }

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: testSummary
          });

  test-summary:
    needs: integration-tests
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        path: all-test-results
        
    - name: Generate test summary
      run: |
        echo "## Integration Test Summary" >> test-summary.md
        echo "" >> test-summary.md
        echo "### Test Results by Python Version:" >> test-summary.md
        echo "" >> test-summary.md
        
        for dir in all-test-results/*/; do
          if [ -d "$dir" ]; then
            version=$(basename "$dir" | sed 's/test-results-//')
            echo "#### Python $version" >> test-summary.md
            echo "" >> test-summary.md
            
            if [ -f "$dir/test-reports/all-tests.txt" ]; then
              echo '```' >> test-summary.md
              cat "$dir/test-reports/all-tests.txt" >> test-summary.md
              echo '```' >> test-summary.md
            else
              echo "No test results found for Python $version" >> test-summary.md
            fi
            echo "" >> test-summary.md
          fi
        done
        
    - name: Upload test summary
      uses: actions/upload-artifact@v4
      with:
        name: test-summary
        path: test-summary.md
        retention-days: 30
